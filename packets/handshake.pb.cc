// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: handshake.proto

#include "handshake.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_handshake_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DS_PublicKey_handshake_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_handshake_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DS_Result_handshake_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_handshake_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KEM_PublicKey_handshake_2eproto;
namespace neptune {
namespace packets {
class DS_PublicKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DS_PublicKey> _instance;
} _DS_PublicKey_default_instance_;
class DS_ResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DS_Result> _instance;
} _DS_Result_default_instance_;
class KEM_PublicKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KEM_PublicKey> _instance;
} _KEM_PublicKey_default_instance_;
class HandshakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Handshake> _instance;
} _Handshake_default_instance_;
}  // namespace packets
}  // namespace neptune
static void InitDefaultsscc_info_DS_PublicKey_handshake_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::neptune::packets::_DS_PublicKey_default_instance_;
    new (ptr) ::neptune::packets::DS_PublicKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DS_PublicKey_handshake_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DS_PublicKey_handshake_2eproto}, {}};

static void InitDefaultsscc_info_DS_Result_handshake_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::neptune::packets::_DS_Result_default_instance_;
    new (ptr) ::neptune::packets::DS_Result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DS_Result_handshake_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DS_Result_handshake_2eproto}, {}};

static void InitDefaultsscc_info_Handshake_handshake_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::neptune::packets::_Handshake_default_instance_;
    new (ptr) ::neptune::packets::Handshake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Handshake_handshake_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Handshake_handshake_2eproto}, {
      &scc_info_KEM_PublicKey_handshake_2eproto.base,
      &scc_info_DS_PublicKey_handshake_2eproto.base,
      &scc_info_DS_Result_handshake_2eproto.base,}};

static void InitDefaultsscc_info_KEM_PublicKey_handshake_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::neptune::packets::_KEM_PublicKey_default_instance_;
    new (ptr) ::neptune::packets::KEM_PublicKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KEM_PublicKey_handshake_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KEM_PublicKey_handshake_2eproto}, {}};

namespace neptune {
namespace packets {
bool E_DS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> E_DS_strings[8] = {};

static const char E_DS_names[] =
  "DILITHIUM_1024x768"
  "DILITHIUM_1280x1024"
  "DILITHIUM_1536x1280"
  "ED25519"
  "ED448"
  "FALCON_1024"
  "FALCON_512"
  "_INVALID_DS_";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry E_DS_entries[] = {
  { {E_DS_names + 0, 18}, 3 },
  { {E_DS_names + 18, 19}, 4 },
  { {E_DS_names + 37, 19}, 5 },
  { {E_DS_names + 56, 7}, 1 },
  { {E_DS_names + 63, 5}, 2 },
  { {E_DS_names + 68, 11}, 7 },
  { {E_DS_names + 79, 10}, 6 },
  { {E_DS_names + 89, 12}, 0 },
};

static const int E_DS_entries_by_number[] = {
  7, // 0 -> _INVALID_DS_
  3, // 1 -> ED25519
  4, // 2 -> ED448
  0, // 3 -> DILITHIUM_1024x768
  1, // 4 -> DILITHIUM_1280x1024
  2, // 5 -> DILITHIUM_1536x1280
  6, // 6 -> FALCON_512
  5, // 7 -> FALCON_1024
};

const std::string& E_DS_Name(
    E_DS value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          E_DS_entries,
          E_DS_entries_by_number,
          8, E_DS_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      E_DS_entries,
      E_DS_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     E_DS_strings[idx].get();
}
bool E_DS_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_DS* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      E_DS_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<E_DS>(int_value);
  }
  return success;
}
bool E_DS_HASH_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 4:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> E_DS_HASH_strings[4] = {};

static const char E_DS_HASH_names[] =
  "BLAKE3_256"
  "SHA2_256"
  "SHA3_256"
  "_INVALID_DS_HASH_";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry E_DS_HASH_entries[] = {
  { {E_DS_HASH_names + 0, 10}, 7 },
  { {E_DS_HASH_names + 10, 8}, 1 },
  { {E_DS_HASH_names + 18, 8}, 4 },
  { {E_DS_HASH_names + 26, 17}, 0 },
};

static const int E_DS_HASH_entries_by_number[] = {
  3, // 0 -> _INVALID_DS_HASH_
  1, // 1 -> SHA2_256
  2, // 4 -> SHA3_256
  0, // 7 -> BLAKE3_256
};

const std::string& E_DS_HASH_Name(
    E_DS_HASH value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          E_DS_HASH_entries,
          E_DS_HASH_entries_by_number,
          4, E_DS_HASH_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      E_DS_HASH_entries,
      E_DS_HASH_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     E_DS_HASH_strings[idx].get();
}
bool E_DS_HASH_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_DS_HASH* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      E_DS_HASH_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<E_DS_HASH>(int_value);
  }
  return success;
}
bool E_KEM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> E_KEM_strings[13] = {};

static const char E_KEM_names[] =
  "FireSABER"
  "KYBER_1024"
  "KYBER_1024_90s"
  "KYBER_512"
  "KYBER_512_90s"
  "KYBER_768"
  "KYBER_768_90s"
  "LightSABER"
  "NTRU"
  "SABER"
  "X25519"
  "X448"
  "_INVALID_KEM_";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry E_KEM_entries[] = {
  { {E_KEM_names + 0, 9}, 11 },
  { {E_KEM_names + 9, 10}, 5 },
  { {E_KEM_names + 19, 14}, 8 },
  { {E_KEM_names + 33, 9}, 3 },
  { {E_KEM_names + 42, 13}, 6 },
  { {E_KEM_names + 55, 9}, 4 },
  { {E_KEM_names + 64, 13}, 7 },
  { {E_KEM_names + 77, 10}, 9 },
  { {E_KEM_names + 87, 4}, 12 },
  { {E_KEM_names + 91, 5}, 10 },
  { {E_KEM_names + 96, 6}, 1 },
  { {E_KEM_names + 102, 4}, 2 },
  { {E_KEM_names + 106, 13}, 0 },
};

static const int E_KEM_entries_by_number[] = {
  12, // 0 -> _INVALID_KEM_
  10, // 1 -> X25519
  11, // 2 -> X448
  3, // 3 -> KYBER_512
  5, // 4 -> KYBER_768
  1, // 5 -> KYBER_1024
  4, // 6 -> KYBER_512_90s
  6, // 7 -> KYBER_768_90s
  2, // 8 -> KYBER_1024_90s
  7, // 9 -> LightSABER
  9, // 10 -> SABER
  0, // 11 -> FireSABER
  8, // 12 -> NTRU
};

const std::string& E_KEM_Name(
    E_KEM value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          E_KEM_entries,
          E_KEM_entries_by_number,
          13, E_KEM_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      E_KEM_entries,
      E_KEM_entries_by_number,
      13, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     E_KEM_strings[idx].get();
}
bool E_KEM_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_KEM* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      E_KEM_entries, 13, name, &int_value);
  if (success) {
    *value = static_cast<E_KEM>(int_value);
  }
  return success;
}

// ===================================================================

class DS_PublicKey::_Internal {
 public:
};

DS_PublicKey::DS_PublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:neptune.packets.DS_PublicKey)
}
DS_PublicKey::DS_PublicKey(const DS_PublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:neptune.packets.DS_PublicKey)
}

void DS_PublicKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DS_PublicKey_handshake_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

DS_PublicKey::~DS_PublicKey() {
  // @@protoc_insertion_point(destructor:neptune.packets.DS_PublicKey)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DS_PublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DS_PublicKey::ArenaDtor(void* object) {
  DS_PublicKey* _this = reinterpret_cast< DS_PublicKey* >(object);
  (void)_this;
}
void DS_PublicKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DS_PublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DS_PublicKey& DS_PublicKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DS_PublicKey_handshake_2eproto.base);
  return *internal_default_instance();
}


void DS_PublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:neptune.packets.DS_PublicKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* DS_PublicKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .neptune.packets.E_DS type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::neptune::packets::E_DS>(val));
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DS_PublicKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neptune.packets.DS_PublicKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .neptune.packets.E_DS type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neptune.packets.DS_PublicKey)
  return target;
}

size_t DS_PublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neptune.packets.DS_PublicKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // .neptune.packets.E_DS type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DS_PublicKey::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DS_PublicKey*>(
      &from));
}

void DS_PublicKey::MergeFrom(const DS_PublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neptune.packets.DS_PublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void DS_PublicKey::CopyFrom(const DS_PublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neptune.packets.DS_PublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DS_PublicKey::IsInitialized() const {
  return true;
}

void DS_PublicKey::InternalSwap(DS_PublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

std::string DS_PublicKey::GetTypeName() const {
  return "neptune.packets.DS_PublicKey";
}


// ===================================================================

class DS_Result::_Internal {
 public:
};

DS_Result::DS_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:neptune.packets.DS_Result)
}
DS_Result::DS_Result(const DS_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:neptune.packets.DS_Result)
}

void DS_Result::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DS_Result_handshake_2eproto.base);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

DS_Result::~DS_Result() {
  // @@protoc_insertion_point(destructor:neptune.packets.DS_Result)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DS_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DS_Result::ArenaDtor(void* object) {
  DS_Result* _this = reinterpret_cast< DS_Result* >(object);
  (void)_this;
}
void DS_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DS_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DS_Result& DS_Result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DS_Result_handshake_2eproto.base);
  return *internal_default_instance();
}


void DS_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:neptune.packets.DS_Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* DS_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .neptune.packets.E_DS type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::neptune::packets::E_DS>(val));
        } else goto handle_unusual;
        continue;
      // bytes result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DS_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neptune.packets.DS_Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .neptune.packets.E_DS type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes result = 2;
  if (this->result().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neptune.packets.DS_Result)
  return target;
}

size_t DS_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neptune.packets.DS_Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result = 2;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  // .neptune.packets.E_DS type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DS_Result::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DS_Result*>(
      &from));
}

void DS_Result::MergeFrom(const DS_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neptune.packets.DS_Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result().size() > 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void DS_Result::CopyFrom(const DS_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neptune.packets.DS_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DS_Result::IsInitialized() const {
  return true;
}

void DS_Result::InternalSwap(DS_Result* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

std::string DS_Result::GetTypeName() const {
  return "neptune.packets.DS_Result";
}


// ===================================================================

class KEM_PublicKey::_Internal {
 public:
};

KEM_PublicKey::KEM_PublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:neptune.packets.KEM_PublicKey)
}
KEM_PublicKey::KEM_PublicKey(const KEM_PublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:neptune.packets.KEM_PublicKey)
}

void KEM_PublicKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KEM_PublicKey_handshake_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

KEM_PublicKey::~KEM_PublicKey() {
  // @@protoc_insertion_point(destructor:neptune.packets.KEM_PublicKey)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KEM_PublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KEM_PublicKey::ArenaDtor(void* object) {
  KEM_PublicKey* _this = reinterpret_cast< KEM_PublicKey* >(object);
  (void)_this;
}
void KEM_PublicKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KEM_PublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KEM_PublicKey& KEM_PublicKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KEM_PublicKey_handshake_2eproto.base);
  return *internal_default_instance();
}


void KEM_PublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:neptune.packets.KEM_PublicKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* KEM_PublicKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .neptune.packets.E_KEM type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::neptune::packets::E_KEM>(val));
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KEM_PublicKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neptune.packets.KEM_PublicKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .neptune.packets.E_KEM type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neptune.packets.KEM_PublicKey)
  return target;
}

size_t KEM_PublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neptune.packets.KEM_PublicKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // .neptune.packets.E_KEM type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KEM_PublicKey::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KEM_PublicKey*>(
      &from));
}

void KEM_PublicKey::MergeFrom(const KEM_PublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neptune.packets.KEM_PublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void KEM_PublicKey::CopyFrom(const KEM_PublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neptune.packets.KEM_PublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KEM_PublicKey::IsInitialized() const {
  return true;
}

void KEM_PublicKey::InternalSwap(KEM_PublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

std::string KEM_PublicKey::GetTypeName() const {
  return "neptune.packets.KEM_PublicKey";
}


// ===================================================================

class Handshake::_Internal {
 public:
};

Handshake::Handshake(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  kem_keys_(arena),
  ds_keys_(arena),
  ds_results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:neptune.packets.Handshake)
}
Handshake::Handshake(const Handshake& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      kem_keys_(from.kem_keys_),
      ds_keys_(from.ds_keys_),
      ds_results_(from.ds_results_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_salt().empty()) {
    salt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_salt(), 
      GetArena());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:neptune.packets.Handshake)
}

void Handshake::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Handshake_handshake_2eproto.base);
  salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
}

Handshake::~Handshake() {
  // @@protoc_insertion_point(destructor:neptune.packets.Handshake)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Handshake::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  salt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Handshake::ArenaDtor(void* object) {
  Handshake* _this = reinterpret_cast< Handshake* >(object);
  (void)_this;
}
void Handshake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Handshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Handshake& Handshake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Handshake_handshake_2eproto.base);
  return *internal_default_instance();
}


void Handshake::Clear() {
// @@protoc_insertion_point(message_clear_start:neptune.packets.Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kem_keys_.Clear();
  ds_keys_.Clear();
  ds_results_.Clear();
  salt_.ClearToEmpty();
  version_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* Handshake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .neptune.packets.KEM_PublicKey kem_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kem_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .neptune.packets.DS_PublicKey ds_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ds_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .neptune.packets.DS_Result ds_results = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ds_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes salt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_salt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Handshake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:neptune.packets.Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // repeated .neptune.packets.KEM_PublicKey kem_keys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kem_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_kem_keys(i), target, stream);
  }

  // repeated .neptune.packets.DS_PublicKey ds_keys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ds_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ds_keys(i), target, stream);
  }

  // repeated .neptune.packets.DS_Result ds_results = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ds_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ds_results(i), target, stream);
  }

  // bytes salt = 5;
  if (this->salt().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_salt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neptune.packets.Handshake)
  return target;
}

size_t Handshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neptune.packets.Handshake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .neptune.packets.KEM_PublicKey kem_keys = 2;
  total_size += 1UL * this->_internal_kem_keys_size();
  for (const auto& msg : this->kem_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .neptune.packets.DS_PublicKey ds_keys = 3;
  total_size += 1UL * this->_internal_ds_keys_size();
  for (const auto& msg : this->ds_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .neptune.packets.DS_Result ds_results = 4;
  total_size += 1UL * this->_internal_ds_results_size();
  for (const auto& msg : this->ds_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes salt = 5;
  if (this->salt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_salt());
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Handshake::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Handshake*>(
      &from));
}

void Handshake::MergeFrom(const Handshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neptune.packets.Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kem_keys_.MergeFrom(from.kem_keys_);
  ds_keys_.MergeFrom(from.ds_keys_);
  ds_results_.MergeFrom(from.ds_results_);
  if (from.salt().size() > 0) {
    _internal_set_salt(from._internal_salt());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void Handshake::CopyFrom(const Handshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neptune.packets.Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handshake::IsInitialized() const {
  return true;
}

void Handshake::InternalSwap(Handshake* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  kem_keys_.InternalSwap(&other->kem_keys_);
  ds_keys_.InternalSwap(&other->ds_keys_);
  ds_results_.InternalSwap(&other->ds_results_);
  salt_.Swap(&other->salt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(version_, other->version_);
}

std::string Handshake::GetTypeName() const {
  return "neptune.packets.Handshake";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace packets
}  // namespace neptune
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::neptune::packets::DS_PublicKey* Arena::CreateMaybeMessage< ::neptune::packets::DS_PublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neptune::packets::DS_PublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::neptune::packets::DS_Result* Arena::CreateMaybeMessage< ::neptune::packets::DS_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neptune::packets::DS_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::neptune::packets::KEM_PublicKey* Arena::CreateMaybeMessage< ::neptune::packets::KEM_PublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neptune::packets::KEM_PublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::neptune::packets::Handshake* Arena::CreateMaybeMessage< ::neptune::packets::Handshake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::neptune::packets::Handshake >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
